
3_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019ac  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001b68  08001b68  00011b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ba8  08001ba8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ba8  08001ba8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ba8  08001ba8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ba8  08001ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bac  08001bac  00011bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001bbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001bbc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000663d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000129e  00000000  00000000  00026679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00027918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  00027ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c87  00000000  00000000  00028410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000062fb  00000000  00000000  00050097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3df3  00000000  00000000  00056392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a185  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001520  00000000  00000000  0014a1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001b50 	.word	0x08001b50

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001b50 	.word	0x08001b50

080001fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MX_GPIO_Init+0x5c>)
 8000212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000214:	4a10      	ldr	r2, [pc, #64]	; (8000258 <MX_GPIO_Init+0x5c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021c:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <MX_GPIO_Init+0x5c>)
 800021e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000220:	f003 0304 	and.w	r3, r3, #4
 8000224:	603b      	str	r3, [r7, #0]
 8000226:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800022c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <MX_GPIO_Init+0x60>)
 8000230:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000232:	2302      	movs	r3, #2
 8000234:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4619      	mov	r1, r3
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <MX_GPIO_Init+0x64>)
 800023c:	f000 fb1e 	bl	800087c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2100      	movs	r1, #0
 8000244:	2028      	movs	r0, #40	; 0x28
 8000246:	f000 fae2 	bl	800080e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800024a:	2028      	movs	r0, #40	; 0x28
 800024c:	f000 fafb 	bl	8000846 <HAL_NVIC_EnableIRQ>

}
 8000250:	bf00      	nop
 8000252:	3718      	adds	r7, #24
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40021000 	.word	0x40021000
 800025c:	10310000 	.word	0x10310000
 8000260:	48000800 	.word	0x48000800

08000264 <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//Przerwanie nr 1.
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	80fb      	strh	r3, [r7, #6]
		if (  GPIO_Pin == BUTTON_Pin )		//jesli pin przerwania == przycisk to wykonaj:
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000274:	d121      	bne.n	80002ba <HAL_GPIO_EXTI_Callback+0x56>
		{
			// zczytujemy diode na GPIOB, pin14, pin state = przycisk
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin));
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	4812      	ldr	r0, [pc, #72]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x60>)
 800027c:	f000 fc90 	bl	8000ba0 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	461a      	mov	r2, r3
 8000284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000288:	480f      	ldr	r0, [pc, #60]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x64>)
 800028a:	f000 fca1 	bl	8000bd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin));
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x60>)
 8000294:	f000 fc84 	bl	8000ba0 <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	2180      	movs	r1, #128	; 0x80
 800029e:	480a      	ldr	r0, [pc, #40]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x64>)
 80002a0:	f000 fc96 	bl	8000bd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin));
 80002a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a8:	4806      	ldr	r0, [pc, #24]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x60>)
 80002aa:	f000 fc79 	bl	8000ba0 <HAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x60>)
 80002b6:	f000 fc8b 	bl	8000bd0 <HAL_GPIO_WritePin>
		}

	}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	48000800 	.word	0x48000800
 80002c8:	48000400 	.word	0x48000400

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d2:	f000 f94c 	bl	800056e <HAL_Init>

  /* USER CODE BEGIN Init */

  // LED1,2 = PORT B
  // LED 3, Button_1 = PORT C
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d6:	4b24      	ldr	r3, [pc, #144]	; (8000368 <main+0x9c>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a23      	ldr	r2, [pc, #140]	; (8000368 <main+0x9c>)
 80002dc:	f043 0302 	orr.w	r3, r3, #2
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e2:	4b21      	ldr	r3, [pc, #132]	; (8000368 <main+0x9c>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	f003 0302 	and.w	r3, r3, #2
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <main+0x9c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <main+0x9c>)
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fa:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <main+0x9c>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	f003 0304 	and.w	r3, r3, #4
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  // konifguracja diód poprzez strukturę.
  // konfiguracja przycisku poprzez *ioc

  GPIO_InitTypeDef gpio;
   gpio.Pin = GPIO_PIN_7;
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	60fb      	str	r3, [r7, #12]
   gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	613b      	str	r3, [r7, #16]
   gpio.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
   gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOC, &gpio);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	4619      	mov	r1, r3
 800031c:	4813      	ldr	r0, [pc, #76]	; (800036c <main+0xa0>)
 800031e:	f000 faad 	bl	800087c <HAL_GPIO_Init>

   gpio.Pin = GPIO_PIN_7;
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	60fb      	str	r3, [r7, #12]
   gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	613b      	str	r3, [r7, #16]
   gpio.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
   gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &gpio);
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	4619      	mov	r1, r3
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <main+0xa4>)
 800033a:	f000 fa9f 	bl	800087c <HAL_GPIO_Init>

   gpio.Pin = GPIO_PIN_14;
 800033e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000342:	60fb      	str	r3, [r7, #12]
   gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	613b      	str	r3, [r7, #16]
   gpio.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
   gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &gpio);
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <main+0xa4>)
 8000358:	f000 fa90 	bl	800087c <HAL_GPIO_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f80a 	bl	8000374 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f7ff ff4c 	bl	80001fc <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000364:	e7fe      	b.n	8000364 <main+0x98>
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000
 800036c:	48000800 	.word	0x48000800
 8000370:	48000400 	.word	0x48000400

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b096      	sub	sp, #88	; 0x58
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	2244      	movs	r2, #68	; 0x44
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f001 fbdc 	bl	8001b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	463b      	mov	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000396:	f44f 7000 	mov.w	r0, #512	; 0x200
 800039a:	f000 fc69 	bl	8000c70 <HAL_PWREx_ControlVoltageScaling>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003a4:	f000 f82c 	bl	8000400 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003a8:	2310      	movs	r3, #16
 80003aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003b4:	2360      	movs	r3, #96	; 0x60
 80003b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 fcf9 	bl	8000db8 <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003cc:	f000 f818 	bl	8000400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	230f      	movs	r3, #15
 80003d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003d4:	2300      	movs	r3, #0
 80003d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e4:	463b      	mov	r3, r7
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 f90b 	bl	8001604 <HAL_RCC_ClockConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003f4:	f000 f804 	bl	8000400 <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	3758      	adds	r7, #88	; 0x58
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	e7fe      	b.n	8000408 <Error_Handler+0x8>
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x44>)
 8000414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x44>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6613      	str	r3, [r2, #96]	; 0x60
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x44>)
 8000420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_MspInit+0x44>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	4a08      	ldr	r2, [pc, #32]	; (8000450 <HAL_MspInit+0x44>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	6593      	str	r3, [r2, #88]	; 0x58
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <HAL_MspInit+0x44>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <MemManage_Handler+0x4>

08000466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <UsageFault_Handler+0x4>

08000472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 f8ba 	bl	8000618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80004ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004b0:	f000 fba6 	bl	8000c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <SystemInit+0x5c>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c2:	4a14      	ldr	r2, [pc, #80]	; (8000514 <SystemInit+0x5c>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <SystemInit+0x60>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a11      	ldr	r2, [pc, #68]	; (8000518 <SystemInit+0x60>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <SystemInit+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <SystemInit+0x60>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <SystemInit+0x60>)
 80004e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <SystemInit+0x60>)
 80004f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <SystemInit+0x60>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <SystemInit+0x60>)
 80004fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000500:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <SystemInit+0x60>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000ed00 	.word	0xe000ed00
 8000518:	40021000 	.word	0x40021000

0800051c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800051c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000554 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000520:	f7ff ffca 	bl	80004b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000524:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000526:	e003      	b.n	8000530 <LoopCopyDataInit>

08000528 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800052a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800052c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800052e:	3104      	adds	r1, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000530:	480a      	ldr	r0, [pc, #40]	; (800055c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000534:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000536:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000538:	d3f6      	bcc.n	8000528 <CopyDataInit>
	ldr	r2, =_sbss
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <LoopForever+0x12>)
	b	LoopFillZerobss
 800053c:	e002      	b.n	8000544 <LoopFillZerobss>

0800053e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800053e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000540:	f842 3b04 	str.w	r3, [r2], #4

08000544 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <LoopForever+0x16>)
	cmp	r2, r3
 8000546:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000548:	d3f9      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054a:	f001 fad5 	bl	8001af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054e:	f7ff febd 	bl	80002cc <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000554:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000558:	08001bb0 	.word	0x08001bb0
	ldr	r0, =_sdata
 800055c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000560:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000564:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000568:	2000002c 	.word	0x2000002c

0800056c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_IRQHandler>

0800056e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000574:	2300      	movs	r3, #0
 8000576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f93d 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800057e:	2000      	movs	r0, #0
 8000580:	f000 f80e 	bl	80005a0 <HAL_InitTick>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	e001      	b.n	8000594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000590:	f7ff ff3c 	bl	800040c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000594:	79fb      	ldrb	r3, [r7, #7]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_InitTick+0x6c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d023      	beq.n	80005fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_InitTick+0x70>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_InitTick+0x6c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f949 	bl	8000862 <HAL_SYSTICK_Config>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10f      	bne.n	80005f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d809      	bhi.n	80005f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f000 f913 	bl	800080e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_InitTick+0x74>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	e007      	b.n	8000600 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	e004      	b.n	8000600 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	e001      	b.n	8000600 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000008 	.word	0x20000008
 8000610:	20000000 	.word	0x20000000
 8000614:	20000004 	.word	0x20000004

08000618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x20>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x24>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_IncTick+0x24>)
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000008 	.word	0x20000008
 800063c:	20000028 	.word	0x20000028

08000640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_GetTick+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c4:	d301      	bcc.n	80007ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00f      	b.n	80007ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <SysTick_Config+0x40>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d2:	210f      	movs	r1, #15
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f7ff ff8e 	bl	80006f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <SysTick_Config+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <SysTick_Config+0x40>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff29 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000820:	f7ff ff3e 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 8000824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f7ff ff8e 	bl	800074c <NVIC_EncodePriority>
 8000830:	4602      	mov	r2, r0
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff5d 	bl	80006f8 <__NVIC_SetPriority>
}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff31 	bl	80006bc <__NVIC_EnableIRQ>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffa2 	bl	80007b4 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088a:	e166      	b.n	8000b5a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 8158 	beq.w	8000b54 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d00b      	beq.n	80008c4 <HAL_GPIO_Init+0x48>
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d007      	beq.n	80008c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b8:	2b11      	cmp	r3, #17
 80008ba:	d003      	beq.n	80008c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b12      	cmp	r3, #18
 80008c2:	d130      	bne.n	8000926 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	2203      	movs	r2, #3
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68da      	ldr	r2, [r3, #12]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008fa:	2201      	movs	r2, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	f003 0201 	and.w	r2, r3, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2203      	movs	r2, #3
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d003      	beq.n	8000966 <HAL_GPIO_Init+0xea>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b12      	cmp	r3, #18
 8000964:	d123      	bne.n	80009ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	691a      	ldr	r2, [r3, #16]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	08da      	lsrs	r2, r3, #3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3208      	adds	r2, #8
 80009a8:	6939      	ldr	r1, [r7, #16]
 80009aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0203 	and.w	r2, r3, #3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f000 80b2 	beq.w	8000b54 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f0:	4b61      	ldr	r3, [pc, #388]	; (8000b78 <HAL_GPIO_Init+0x2fc>)
 80009f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f4:	4a60      	ldr	r2, [pc, #384]	; (8000b78 <HAL_GPIO_Init+0x2fc>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6613      	str	r3, [r2, #96]	; 0x60
 80009fc:	4b5e      	ldr	r3, [pc, #376]	; (8000b78 <HAL_GPIO_Init+0x2fc>)
 80009fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a08:	4a5c      	ldr	r2, [pc, #368]	; (8000b7c <HAL_GPIO_Init+0x300>)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	089b      	lsrs	r3, r3, #2
 8000a0e:	3302      	adds	r3, #2
 8000a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	220f      	movs	r2, #15
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a32:	d02b      	beq.n	8000a8c <HAL_GPIO_Init+0x210>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a52      	ldr	r2, [pc, #328]	; (8000b80 <HAL_GPIO_Init+0x304>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d025      	beq.n	8000a88 <HAL_GPIO_Init+0x20c>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a51      	ldr	r2, [pc, #324]	; (8000b84 <HAL_GPIO_Init+0x308>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d01f      	beq.n	8000a84 <HAL_GPIO_Init+0x208>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a50      	ldr	r2, [pc, #320]	; (8000b88 <HAL_GPIO_Init+0x30c>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d019      	beq.n	8000a80 <HAL_GPIO_Init+0x204>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a4f      	ldr	r2, [pc, #316]	; (8000b8c <HAL_GPIO_Init+0x310>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d013      	beq.n	8000a7c <HAL_GPIO_Init+0x200>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a4e      	ldr	r2, [pc, #312]	; (8000b90 <HAL_GPIO_Init+0x314>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d00d      	beq.n	8000a78 <HAL_GPIO_Init+0x1fc>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a4d      	ldr	r2, [pc, #308]	; (8000b94 <HAL_GPIO_Init+0x318>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d007      	beq.n	8000a74 <HAL_GPIO_Init+0x1f8>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <HAL_GPIO_Init+0x31c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d101      	bne.n	8000a70 <HAL_GPIO_Init+0x1f4>
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	e00e      	b.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a70:	2308      	movs	r3, #8
 8000a72:	e00c      	b.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a74:	2306      	movs	r3, #6
 8000a76:	e00a      	b.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a78:	2305      	movs	r3, #5
 8000a7a:	e008      	b.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	e006      	b.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a80:	2303      	movs	r3, #3
 8000a82:	e004      	b.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a84:	2302      	movs	r3, #2
 8000a86:	e002      	b.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e000      	b.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	f002 0203 	and.w	r2, r2, #3
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	4093      	lsls	r3, r2
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a9e:	4937      	ldr	r1, [pc, #220]	; (8000b7c <HAL_GPIO_Init+0x300>)
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aac:	4b3b      	ldr	r3, [pc, #236]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ad0:	4a32      	ldr	r2, [pc, #200]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000afa:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3301      	adds	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa22 f303 	lsr.w	r3, r2, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f47f ae91 	bne.w	800088c <HAL_GPIO_Init+0x10>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	bf00      	nop
 8000b6e:	371c      	adds	r7, #28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	48000400 	.word	0x48000400
 8000b84:	48000800 	.word	0x48000800
 8000b88:	48000c00 	.word	0x48000c00
 8000b8c:	48001000 	.word	0x48001000
 8000b90:	48001400 	.word	0x48001400
 8000b94:	48001800 	.word	0x48001800
 8000b98:	48001c00 	.word	0x48001c00
 8000b9c:	40010400 	.word	0x40010400

08000ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	691a      	ldr	r2, [r3, #16]
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e001      	b.n	8000bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	807b      	strh	r3, [r7, #2]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000be0:	787b      	ldrb	r3, [r7, #1]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000be6:	887a      	ldrh	r2, [r7, #2]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bec:	e002      	b.n	8000bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fb20 	bl	8000264 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c40:	d102      	bne.n	8000c48 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	e00b      	b.n	8000c60 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c56:	d102      	bne.n	8000c5e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5c:	e000      	b.n	8000c60 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000c5e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40007000 	.word	0x40007000

08000c70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d141      	bne.n	8000d02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c7e:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8a:	d131      	bne.n	8000cf0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c8c:	4b47      	ldr	r3, [pc, #284]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c92:	4a46      	ldr	r2, [pc, #280]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	4b43      	ldr	r3, [pc, #268]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ca4:	4a41      	ldr	r2, [pc, #260]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000cac:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2232      	movs	r2, #50	; 0x32
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0c9b      	lsrs	r3, r3, #18
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc2:	e002      	b.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cca:	4b38      	ldr	r3, [pc, #224]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd6:	d102      	bne.n	8000cde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f2      	bne.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cde:	4b33      	ldr	r3, [pc, #204]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cea:	d158      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e057      	b.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d00:	e04d      	b.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d08:	d141      	bne.n	8000d8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d16:	d131      	bne.n	8000d7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d30:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2232      	movs	r2, #50	; 0x32
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	0c9b      	lsrs	r3, r3, #18
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d4e:	e002      	b.n	8000d56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d62:	d102      	bne.n	8000d6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f2      	bne.n	8000d50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d76:	d112      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e011      	b.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d8c:	e007      	b.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40007000 	.word	0x40007000
 8000db0:	20000000 	.word	0x20000000
 8000db4:	431bde83 	.word	0x431bde83

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f000 bc16 	b.w	80015f8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dcc:	4ba0      	ldr	r3, [pc, #640]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dd6:	4b9e      	ldr	r3, [pc, #632]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80e4 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d007      	beq.n	8000e04 <HAL_RCC_OscConfig+0x4c>
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	2b0c      	cmp	r3, #12
 8000df8:	f040 808b 	bne.w	8000f12 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	f040 8087 	bne.w	8000f12 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e04:	4b92      	ldr	r3, [pc, #584]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <HAL_RCC_OscConfig+0x64>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e3ed      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a1a      	ldr	r2, [r3, #32]
 8000e20:	4b8b      	ldr	r3, [pc, #556]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <HAL_RCC_OscConfig+0x7e>
 8000e2c:	4b88      	ldr	r3, [pc, #544]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e34:	e005      	b.n	8000e42 <HAL_RCC_OscConfig+0x8a>
 8000e36:	4b86      	ldr	r3, [pc, #536]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d223      	bcs.n	8000e8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fd92 	bl	8001974 <RCC_SetFlashLatencyFromMSIRange>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e3ce      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e5a:	4b7d      	ldr	r3, [pc, #500]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7c      	ldr	r2, [pc, #496]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b7a      	ldr	r3, [pc, #488]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4977      	ldr	r1, [pc, #476]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e78:	4b75      	ldr	r3, [pc, #468]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	4972      	ldr	r1, [pc, #456]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	604b      	str	r3, [r1, #4]
 8000e8c:	e025      	b.n	8000eda <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e8e:	4b70      	ldr	r3, [pc, #448]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a6f      	ldr	r2, [pc, #444]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b6d      	ldr	r3, [pc, #436]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	496a      	ldr	r1, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eac:	4b68      	ldr	r3, [pc, #416]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	4965      	ldr	r1, [pc, #404]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fd52 	bl	8001974 <RCC_SetFlashLatencyFromMSIRange>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e38e      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000eda:	f000 fcbf 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	495a      	ldr	r1, [pc, #360]	; (8001054 <HAL_RCC_OscConfig+0x29c>)
 8000eec:	5ccb      	ldrb	r3, [r1, r3]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef6:	4a58      	ldr	r2, [pc, #352]	; (8001058 <HAL_RCC_OscConfig+0x2a0>)
 8000ef8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000efa:	4b58      	ldr	r3, [pc, #352]	; (800105c <HAL_RCC_OscConfig+0x2a4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb4e 	bl	80005a0 <HAL_InitTick>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d052      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	e372      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d032      	beq.n	8000f80 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f1a:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a4c      	ldr	r2, [pc, #304]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fb8b 	bl	8000640 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fb87 	bl	8000640 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e35b      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f40:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f4c:	4b40      	ldr	r3, [pc, #256]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a3f      	ldr	r2, [pc, #252]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	493a      	ldr	r1, [pc, #232]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f6a:	4b39      	ldr	r3, [pc, #228]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	4935      	ldr	r1, [pc, #212]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
 8000f7e:	e01a      	b.n	8000fb6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a32      	ldr	r2, [pc, #200]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000f86:	f023 0301 	bic.w	r3, r3, #1
 8000f8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fb58 	bl	8000640 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f94:	f7ff fb54 	bl	8000640 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e328      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x1dc>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d073      	beq.n	80010aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d005      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x21c>
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d10e      	bne.n	8000fec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d10b      	bne.n	8000fec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d063      	beq.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d15f      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e305      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d106      	bne.n	8001004 <HAL_RCC_OscConfig+0x24c>
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0x288>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x270>
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0x288>
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_RCC_OscConfig+0x298>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d01b      	beq.n	8001080 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001048:	f7ff fafa 	bl	8000640 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800104e:	e010      	b.n	8001072 <HAL_RCC_OscConfig+0x2ba>
 8001050:	40021000 	.word	0x40021000
 8001054:	08001b68 	.word	0x08001b68
 8001058:	20000000 	.word	0x20000000
 800105c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff faee 	bl	8000640 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e2c2      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001072:	4baf      	ldr	r3, [pc, #700]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x2a8>
 800107e:	e014      	b.n	80010aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001080:	f7ff fade 	bl	8000640 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fada 	bl	8000640 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e2ae      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800109a:	4ba5      	ldr	r3, [pc, #660]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x2d0>
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d060      	beq.n	8001178 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_OscConfig+0x310>
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	d119      	bne.n	80010f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d116      	bne.n	80010f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c8:	4b99      	ldr	r3, [pc, #612]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_OscConfig+0x328>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e28b      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b93      	ldr	r3, [pc, #588]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	061b      	lsls	r3, r3, #24
 80010ee:	4990      	ldr	r1, [pc, #576]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010f4:	e040      	b.n	8001178 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d023      	beq.n	8001146 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010fe:	4b8c      	ldr	r3, [pc, #560]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a8b      	ldr	r2, [pc, #556]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110a:	f7ff fa99 	bl	8000640 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fa95 	bl	8000640 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e269      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001124:	4b82      	ldr	r3, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b7f      	ldr	r3, [pc, #508]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	061b      	lsls	r3, r3, #24
 800113e:	497c      	ldr	r1, [pc, #496]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
 8001144:	e018      	b.n	8001178 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b7a      	ldr	r3, [pc, #488]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a79      	ldr	r2, [pc, #484]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 800114c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001152:	f7ff fa75 	bl	8000640 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fa71 	bl	8000640 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e245      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800116c:	4b70      	ldr	r3, [pc, #448]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d03c      	beq.n	80011fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118c:	4b68      	ldr	r3, [pc, #416]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	4a67      	ldr	r2, [pc, #412]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff fa50 	bl	8000640 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fa4c 	bl	8000640 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e220      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80011b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ef      	beq.n	80011a4 <HAL_RCC_OscConfig+0x3ec>
 80011c4:	e01b      	b.n	80011fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c6:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80011c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011cc:	4a58      	ldr	r2, [pc, #352]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d6:	f7ff fa33 	bl	8000640 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011de:	f7ff fa2f 	bl	8000640 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e203      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011f0:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80011f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ef      	bne.n	80011de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80a6 	beq.w	8001358 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001210:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10d      	bne.n	8001238 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	4b44      	ldr	r3, [pc, #272]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	4a43      	ldr	r2, [pc, #268]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6593      	str	r3, [r2, #88]	; 0x58
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001234:	2301      	movs	r3, #1
 8001236:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001238:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <HAL_RCC_OscConfig+0x57c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d118      	bne.n	8001276 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x57c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a3a      	ldr	r2, [pc, #232]	; (8001334 <HAL_RCC_OscConfig+0x57c>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001250:	f7ff f9f6 	bl	8000640 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001258:	f7ff f9f2 	bl	8000640 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1c6      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_RCC_OscConfig+0x57c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d108      	bne.n	8001290 <HAL_RCC_OscConfig+0x4d8>
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001284:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800128e:	e024      	b.n	80012da <HAL_RCC_OscConfig+0x522>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b05      	cmp	r3, #5
 8001296:	d110      	bne.n	80012ba <HAL_RCC_OscConfig+0x502>
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129e:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80012aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ae:	4a20      	ldr	r2, [pc, #128]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b8:	e00f      	b.n	80012da <HAL_RCC_OscConfig+0x522>
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80012bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80012cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 80012d2:	f023 0304 	bic.w	r3, r3, #4
 80012d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff f9ad 	bl	8000640 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff f9a9 	bl	8000640 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e17b      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_OscConfig+0x578>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0ed      	beq.n	80012ea <HAL_RCC_OscConfig+0x532>
 800130e:	e01a      	b.n	8001346 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff f996 	bl	8000640 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001316:	e00f      	b.n	8001338 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001318:	f7ff f992 	bl	8000640 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	; 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d906      	bls.n	8001338 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e164      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001338:	4ba8      	ldr	r3, [pc, #672]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800133a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1e8      	bne.n	8001318 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001346:	7ffb      	ldrb	r3, [r7, #31]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134c:	4ba3      	ldr	r3, [pc, #652]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	4aa2      	ldr	r2, [pc, #648]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001356:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	2b00      	cmp	r3, #0
 8001362:	d03c      	beq.n	80013de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800136c:	4b9b      	ldr	r3, [pc, #620]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800136e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001372:	4a9a      	ldr	r2, [pc, #616]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff f960 	bl	8000640 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001384:	f7ff f95c 	bl	8000640 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e130      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001396:	4b91      	ldr	r3, [pc, #580]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0ef      	beq.n	8001384 <HAL_RCC_OscConfig+0x5cc>
 80013a4:	e01b      	b.n	80013de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013a6:	4b8d      	ldr	r3, [pc, #564]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80013a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ac:	4a8b      	ldr	r2, [pc, #556]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b6:	f7ff f943 	bl	8000640 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013be:	f7ff f93f 	bl	8000640 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e113      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013d0:	4b82      	ldr	r3, [pc, #520]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80013d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1ef      	bne.n	80013be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8107 	beq.w	80015f6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	f040 80cb 	bne.w	8001588 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013f2:	4b7a      	ldr	r3, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0203 	and.w	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	429a      	cmp	r2, r3
 8001404:	d12c      	bne.n	8001460 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	3b01      	subs	r3, #1
 8001412:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001414:	429a      	cmp	r2, r3
 8001416:	d123      	bne.n	8001460 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d11b      	bne.n	8001460 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d113      	bne.n	8001460 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	3b01      	subs	r3, #1
 8001446:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d109      	bne.n	8001460 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d06d      	beq.n	800153c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d068      	beq.n	8001538 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d105      	bne.n	800147e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001472:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0ba      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a55      	ldr	r2, [pc, #340]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800148e:	f7ff f8d7 	bl	8000640 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff f8d3 	bl	8000640 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0a7      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a8:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f0      	bne.n	8001496 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b4:	4b49      	ldr	r3, [pc, #292]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_RCC_OscConfig+0x828>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014c4:	3a01      	subs	r2, #1
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	4311      	orrs	r1, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014ce:	0212      	lsls	r2, r2, #8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014d6:	0852      	lsrs	r2, r2, #1
 80014d8:	3a01      	subs	r2, #1
 80014da:	0552      	lsls	r2, r2, #21
 80014dc:	4311      	orrs	r1, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014e2:	0852      	lsrs	r2, r2, #1
 80014e4:	3a01      	subs	r2, #1
 80014e6:	0652      	lsls	r2, r2, #25
 80014e8:	4311      	orrs	r1, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014ee:	06d2      	lsls	r2, r2, #27
 80014f0:	430a      	orrs	r2, r1
 80014f2:	493a      	ldr	r1, [pc, #232]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014f8:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a37      	ldr	r2, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80014fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001502:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a34      	ldr	r2, [pc, #208]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800150a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001510:	f7ff f896 	bl	8000640 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff f892 	bl	8000640 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e066      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001536:	e05e      	b.n	80015f6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e05d      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d156      	bne.n	80015f6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a23      	ldr	r2, [pc, #140]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800154e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001552:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800155a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001560:	f7ff f86e 	bl	8000640 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff f86a 	bl	8000640 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e03e      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x7b0>
 8001586:	e036      	b.n	80015f6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d031      	beq.n	80015f2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 8001594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001598:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80015ac:	f023 0303 	bic.w	r3, r3, #3
 80015b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_RCC_OscConfig+0x824>)
 80015b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff f83d 	bl	8000640 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c8:	e00c      	b.n	80015e4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff f839 	bl	8000640 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d905      	bls.n	80015e4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e00d      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
 80015dc:	40021000 	.word	0x40021000
 80015e0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x848>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ec      	bne.n	80015ca <HAL_RCC_OscConfig+0x812>
 80015f0:	e001      	b.n	80015f6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e10f      	b.n	800183c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b89      	ldr	r3, [pc, #548]	; (8001844 <HAL_RCC_ClockConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d910      	bls.n	800164c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b86      	ldr	r3, [pc, #536]	; (8001844 <HAL_RCC_ClockConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 020f 	bic.w	r2, r3, #15
 8001632:	4984      	ldr	r1, [pc, #528]	; (8001844 <HAL_RCC_ClockConfig+0x240>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b82      	ldr	r3, [pc, #520]	; (8001844 <HAL_RCC_ClockConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0f7      	b.n	800183c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8089 	beq.w	800176c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d133      	bne.n	80016ca <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001662:	4b79      	ldr	r3, [pc, #484]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0e4      	b.n	800183c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001672:	f000 f9d9 	bl	8001a28 <RCC_GetSysClockFreqFromPLLSource>
 8001676:	4603      	mov	r3, r0
 8001678:	4a74      	ldr	r2, [pc, #464]	; (800184c <HAL_RCC_ClockConfig+0x248>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d955      	bls.n	800172a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800167e:	4b72      	ldr	r3, [pc, #456]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10a      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800168a:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001692:	4a6d      	ldr	r2, [pc, #436]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001698:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e044      	b.n	800172a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d03e      	beq.n	800172a <HAL_RCC_ClockConfig+0x126>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d13a      	bne.n	800172a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016b4:	4b64      	ldr	r3, [pc, #400]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016bc:	4a62      	ldr	r2, [pc, #392]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 80016be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e02f      	b.n	800172a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0ac      	b.n	800183c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0a0      	b.n	800183c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e098      	b.n	800183c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800170a:	f000 f8a7 	bl	800185c <HAL_RCC_GetSysClockFreq>
 800170e:	4603      	mov	r3, r0
 8001710:	4a4e      	ldr	r2, [pc, #312]	; (800184c <HAL_RCC_ClockConfig+0x248>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d909      	bls.n	800172a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001716:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800171e:	4a4a      	ldr	r2, [pc, #296]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f023 0203 	bic.w	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4944      	ldr	r1, [pc, #272]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001738:	4313      	orrs	r3, r2
 800173a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800173c:	f7fe ff80 	bl	8000640 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	e00a      	b.n	800175a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7fe ff7c 	bl	8000640 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e070      	b.n	800183c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 020c 	and.w	r2, r3, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	429a      	cmp	r2, r3
 800176a:	d1eb      	bne.n	8001744 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4930      	ldr	r1, [pc, #192]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
 800178a:	e008      	b.n	800179e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b80      	cmp	r3, #128	; 0x80
 8001790:	d105      	bne.n	800179e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4a2c      	ldr	r2, [pc, #176]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800179c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179e:	4b29      	ldr	r3, [pc, #164]	; (8001844 <HAL_RCC_ClockConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d210      	bcs.n	80017ce <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_RCC_ClockConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 020f 	bic.w	r2, r3, #15
 80017b4:	4923      	ldr	r1, [pc, #140]	; (8001844 <HAL_RCC_ClockConfig+0x240>)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_RCC_ClockConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e036      	b.n	800183c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4918      	ldr	r1, [pc, #96]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4910      	ldr	r1, [pc, #64]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800180c:	f000 f826 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_RCC_ClockConfig+0x244>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <HAL_RCC_ClockConfig+0x24c>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_RCC_ClockConfig+0x250>)
 800182a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_ClockConfig+0x254>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe feb5 	bl	80005a0 <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]

  return status;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40022000 	.word	0x40022000
 8001848:	40021000 	.word	0x40021000
 800184c:	04c4b400 	.word	0x04c4b400
 8001850:	08001b68 	.word	0x08001b68
 8001854:	20000000 	.word	0x20000000
 8001858:	20000004 	.word	0x20000004

0800185c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x34>
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d121      	bne.n	80018ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d11e      	bne.n	80018ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e005      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018b8:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10d      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d102      	bne.n	80018da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_GetSysClockFreq+0x110>)
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	e004      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_RCC_GetSysClockFreq+0x114>)
 80018e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d134      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0xa6>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d003      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0xac>
 8001900:	e005      	b.n	800190e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_RCC_GetSysClockFreq+0x110>)
 8001904:	617b      	str	r3, [r7, #20]
      break;
 8001906:	e005      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_GetSysClockFreq+0x114>)
 800190a:	617b      	str	r3, [r7, #20]
      break;
 800190c:	e002      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	617b      	str	r3, [r7, #20]
      break;
 8001912:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3301      	adds	r3, #1
 8001920:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	fb02 f203 	mul.w	r2, r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RCC_GetSysClockFreq+0x108>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	0e5b      	lsrs	r3, r3, #25
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	3301      	adds	r3, #1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001954:	69bb      	ldr	r3, [r7, #24]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	08001b78 	.word	0x08001b78
 800196c:	00f42400 	.word	0x00f42400
 8001970:	007a1200 	.word	0x007a1200

08001974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800198c:	f7ff f950 	bl	8000c30 <HAL_PWREx_GetVoltageRange>
 8001990:	6178      	str	r0, [r7, #20]
 8001992:	e014      	b.n	80019be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	; 0x58
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019ac:	f7ff f940 	bl	8000c30 <HAL_PWREx_GetVoltageRange>
 80019b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c4:	d10b      	bne.n	80019de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b80      	cmp	r3, #128	; 0x80
 80019ca:	d913      	bls.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2ba0      	cmp	r3, #160	; 0xa0
 80019d0:	d902      	bls.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019d2:	2302      	movs	r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e00d      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019d8:	2301      	movs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e00a      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b7f      	cmp	r3, #127	; 0x7f
 80019e2:	d902      	bls.n	80019ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e004      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b70      	cmp	r3, #112	; 0x70
 80019ee:	d101      	bne.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019f0:	2301      	movs	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 020f 	bic.w	r2, r3, #15
 80019fc:	4909      	ldr	r1, [pc, #36]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40022000 	.word	0x40022000

08001a28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d118      	bne.n	8001a70 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d107      	bne.n	8001a5a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e005      	b.n	8001a66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a66:	4a21      	ldr	r2, [pc, #132]	; (8001aec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d003      	beq.n	8001a88 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d003      	beq.n	8001a8e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8001a86:	e005      	b.n	8001a94 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001a8a:	613b      	str	r3, [r7, #16]
    break;
 8001a8c:	e005      	b.n	8001a9a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001a90:	613b      	str	r3, [r7, #16]
    break;
 8001a92:	e002      	b.n	8001a9a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
    break;
 8001a98:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	fb02 f203 	mul.w	r2, r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0e5b      	lsrs	r3, r3, #25
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	3301      	adds	r3, #1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001ada:	683b      	ldr	r3, [r7, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08001b78 	.word	0x08001b78
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <__libc_init_array>:
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	4d0d      	ldr	r5, [pc, #52]	; (8001b30 <__libc_init_array+0x38>)
 8001afc:	4c0d      	ldr	r4, [pc, #52]	; (8001b34 <__libc_init_array+0x3c>)
 8001afe:	1b64      	subs	r4, r4, r5
 8001b00:	10a4      	asrs	r4, r4, #2
 8001b02:	2600      	movs	r6, #0
 8001b04:	42a6      	cmp	r6, r4
 8001b06:	d109      	bne.n	8001b1c <__libc_init_array+0x24>
 8001b08:	4d0b      	ldr	r5, [pc, #44]	; (8001b38 <__libc_init_array+0x40>)
 8001b0a:	4c0c      	ldr	r4, [pc, #48]	; (8001b3c <__libc_init_array+0x44>)
 8001b0c:	f000 f820 	bl	8001b50 <_init>
 8001b10:	1b64      	subs	r4, r4, r5
 8001b12:	10a4      	asrs	r4, r4, #2
 8001b14:	2600      	movs	r6, #0
 8001b16:	42a6      	cmp	r6, r4
 8001b18:	d105      	bne.n	8001b26 <__libc_init_array+0x2e>
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
 8001b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b20:	4798      	blx	r3
 8001b22:	3601      	adds	r6, #1
 8001b24:	e7ee      	b.n	8001b04 <__libc_init_array+0xc>
 8001b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b2a:	4798      	blx	r3
 8001b2c:	3601      	adds	r6, #1
 8001b2e:	e7f2      	b.n	8001b16 <__libc_init_array+0x1e>
 8001b30:	08001ba8 	.word	0x08001ba8
 8001b34:	08001ba8 	.word	0x08001ba8
 8001b38:	08001ba8 	.word	0x08001ba8
 8001b3c:	08001bac 	.word	0x08001bac

08001b40 <memset>:
 8001b40:	4402      	add	r2, r0
 8001b42:	4603      	mov	r3, r0
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d100      	bne.n	8001b4a <memset+0xa>
 8001b48:	4770      	bx	lr
 8001b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b4e:	e7f9      	b.n	8001b44 <memset+0x4>

08001b50 <_init>:
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b52:	bf00      	nop
 8001b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b56:	bc08      	pop	{r3}
 8001b58:	469e      	mov	lr, r3
 8001b5a:	4770      	bx	lr

08001b5c <_fini>:
 8001b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5e:	bf00      	nop
 8001b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b62:	bc08      	pop	{r3}
 8001b64:	469e      	mov	lr, r3
 8001b66:	4770      	bx	lr
